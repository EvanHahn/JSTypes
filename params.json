{"tagline":"JSTypes is a small JavaScript library that deals with variable types.","body":"# JSTypes\r\n\r\nJSTypes is a small JavaScript library that does two things:\r\n\r\n1. Check if variables are of certain types (numbers, strings, undefined)\r\n2. Reliably create certain values (`undefined`, `NaN`, `Infinity`)\r\n\r\nExamples:\r\n\r\n```javascript\r\nvar x = 1;\r\nvar y = new Number(22);\r\nx instanceof Number;    // false; not what we want!\r\nJSTypes.isNumber(x);    // true\r\nJSTypes.isNumber(y);    // true\r\n```\r\n```javascript\r\nvar x;\r\nJSTypes.isUndefined(x);    // true\r\nundefined = 10;            // this is terrible code, but it might get written!\r\nJSTypes.isUndefined(x);    // still true\r\n```\r\n```javascript\r\nvar x = 5;\r\nundefined = 10;\r\nx = undefined;                  // bad: x = 10\r\nx = JSTypes.makeUndefined();    // good: x is now really undefined\r\nJSTypes.isUndefined(x);         // true\r\n```\r\n\r\nI recommend (and do) move this library into your code's namespace if you're writing a library. Just replace all occurrences of `JSTypes` with your library's namespace.\r\n\r\nFor licensing info, see LICENSE.txt.\r\n\r\n## API ##\r\n\r\nHere's everything in the API.\r\n\r\n* `JSTypes.isNumber(toCheck)` returns true if something is a number\r\n* `JSTypes.isInteger(toCheck)` returns true if something is an integer\r\n* `JSTypes.isString(toCheck)` returns true if something is a string\r\n* `JSTypes.isBoolean(toCheck)` returns true if something is a boolean\r\n* `JSTypes.isArray(toCheck)` returns true if something is an array\r\n* `JSTypes.isDefined(toCheck)` returns true if something is defined (will return false for `undefined`, or `null`, or `NaN`)\r\n* `JSTypes.isUndefined(toCheck)` returns true if something is `undefined`\r\n* `JSTypes.isNAN(toCheck)` returns true if something is `NaN`\r\n* `JSTypes.isInfinite(toCheck)` returns true of something is positive or negative infinity\r\n* `JSTypes.makeUndefined()` always returns `undefined`, even if it's stupidly redefined\r\n* `JSTypes.makeNaN()` always returns `NaN`, even if it's stupidly redefined\r\n* `JSTypes.makeInfinity()` always returns `Infinity`, even if it's stupidly redefined\r\n\r\n","google":"","name":"JSTypes","note":"Don't delete this file! It's used internally to help with page regeneration."}